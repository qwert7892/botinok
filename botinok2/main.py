import logging
import markups as nav

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state

from chatgpt import *

from db import *


def get_tgAPI():
    sf = open('settings.txt', 'r')
    setfile = sf.readlines()
    return setfile[0].split()[1]


def get_CH_ID1():
    sf = open('settings.txt', 'r')
    setfile = sf.readlines()
    return setfile[2].split()[1]


def get_CH_ID2():
    sf = open('settings.txt', 'r')
    setfile = sf.readlines()
    return setfile[3].split()[1]


API_TOKEN = get_tgAPI()
CH_ID1 = '@' + get_CH_ID1()
CH_ID2 = '@' + get_CH_ID2()
MSG_NOT_FOLLOW = f'–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å —è –ø–æ–¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –ê —Ç—ã –ø–æ–∫–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\nhttps://t.me/{get_CH_ID1()}'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

file = open('db.txt', '+a')
file.close()


class Profile(StatesGroup):
    answer = State()


@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    a = f'ü§ñ –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç ChatGPT!\n\nüîó –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n–¢–∞–∫–∂–µ –±–æ—Ç –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\
 –í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenAI!\n\n–°–æ–≤–µ—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n‚Äì –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.\n‚Äì –ù–µ –ø–∏—à–∏—Ç–µ –µ—Ä—É–Ω–¥—É –∏–Ω–∞—á–µ –æ–¥–µ—Ä–∂–∏—Ç–µ –µ—ë –∂–µ –≤ –æ—Ç–≤–µ—Ç.\n\n\
–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤:\n~ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?\n~ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –ú–∏—Ä–æ–≤–∞—è?\n~ –ù–∞–ø–∏—à–∏ –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Python\n~ –ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ —è –ø—Ä–æ–≤–µ–ª –ª–µ—Ç–æ\n\n\
üî• –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å CHATGPT –≤ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ üëáüèª'
    add_user(str(message.chat.id))
    await message.reply(a)


@dp.message_handler(lambda message: message.text == '–ü–û–î–ü–ò–°–ê–õ–°–Ø ‚úÖ')
async def got_sub(message: types.Message, state: FSMContext):
    if check_sub_channel(await bot.get_chat_member(chat_id=CH_ID1, user_id=message.from_user.id)):
        change_status(str(message.chat.id))
        await message.reply(text='–ö—Ä–∞—Å–∞–≤—á–∏–∫ –±–ª–µ–∞')
        # data = await state.get_data()
        # data = data['profile_answer']
        # a = chat_ai(data)
        # await message.answer(a)

    else:
        await message.reply('–Ω–µ—Ñ–æ—Ä –±–ª–µ')


@dp.message_handler(lambda message: message.text == '–ü–û–î–ü–ò–°–ê–õ–°–Ø ‚úÖ')
async def got_sub2(message: types.Message):
    # await message.reply(MSG_NOT_FOLLOW, reply_markup=nav.bot_sub_checker)
    if check_sub_channel(await bot.get_chat_member(chat_id=CH_ID2, user_id=message.from_user.id)):
        change_status_2(str(message.chat.id))
        await message.reply(text='–ö—Ä–∞—Å–∞–≤—á–∏–∫ –±–ª–µ–∞')
    else:
        await message.reply('–Ω–µ—Ñ–æ—Ä –±–ª–µ')


@dp.message_handler()
async def start_chat(message: types.Message, state: FSMContext):
    if add_user(str(message.chat.id)) is False and int(get_count(str(message.chat.id))) < 3:
        count_user(str(message.chat.id))

        if str(get_count(str(message.chat.id))) == '3':
            a = chat_ai(message.text)
            await bot.send_message(chat_id=message.chat.id, text=a)
            await bot.send_message(chat_id=message.chat.id, text=MSG_NOT_FOLLOW, reply_markup=nav.bot_sub_checker)

        else:
            a = chat_ai(message.text)
            await bot.send_message(chat_id=message.chat.id, text=a)

    elif get_status(str(message.chat.id)) is True and int(get_count(str(message.chat.id))) >= 3:
        a = chat_ai(message.text)
        await bot.send_message(chat_id=message.chat.id, text=a)


def check_sub_channel(chat_member):
    if chat_member['status'] != 'left':
        return True
    else:
        return False


@dp.callback_query_handler(text='subchanneldone1')
async def subchanneldone1(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    if check_sub_channel(await bot.get_chat_member(chat_id=CH_ID1, user_id=message.from_user.id)):
        await bot.send_message(message.from_user.id, 'success!')
        change_status(str(message.from_user.id))
    else:
        await bot.send_message(message.from_user.id, MSG_NOT_FOLLOW, reply_markup=nav.checkSubMenu1)


@dp.callback_query_handler(text='subchanneldone2')
async def subchanneldone1(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    if check_sub_channel(await bot.get_chat_member(chat_id=CH_ID2, user_id=message.from_user.id)):
        await bot.send_message(message.from_user.id, 'success!')
        change_status_2(str(message.from_user.id))
    else:
        await bot.send_message(message.from_user.id, MSG_NOT_FOLLOW, reply_markup=nav.checkSubMenu2)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
