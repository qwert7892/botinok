import logging
import markups as nav

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from chatgpt import *

from db import *

from settings import *

API_TOKEN = get_tgAPI()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

file = open('db.txt', '+a')
file.close()


@dp.message_handler(commands='admin')
async def admin(message: types.Message):
    password = message.text.split()[1]
    com = message.text.split()[2]
    content = message.text.split()[3]
    if password == '1':
        if com == '/add_channel':
            add_channel(content)
            await bot.send_message(chat_id=message.chat.id, text='–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        elif com == '/delete_channel':
            delete_channel(content)
            await bot.send_message(chat_id=message.chat.id, text='–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        elif com == '/change_gpt_key':
            change_gpt_key(content)
            await bot.send_message(chat_id=message.chat.id, text='–ö–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
            openai.api_key = get_ChatGPT_API()
        else:
            await bot.send_message(chat_id=message.chat.id, text='–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞')
    else:
        await bot.send_message(chat_id=message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')


@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    a = f'ü§ñ –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç ChatGPT!\n\nüîó –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n–¢–∞–∫–∂–µ –±–æ—Ç –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\
 –í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenAI!\n\n–°–æ–≤–µ—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n‚Äì –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.\n‚Äì –ù–µ –ø–∏—à–∏—Ç–µ –µ—Ä—É–Ω–¥—É –∏–Ω–∞—á–µ –æ–¥–µ—Ä–∂–∏—Ç–µ –µ—ë –∂–µ –≤ –æ—Ç–≤–µ—Ç.\n\n\
–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤:\n~ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?\n~ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –ú–∏—Ä–æ–≤–∞—è?\n~ –ù–∞–ø–∏—à–∏ –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Python\n~ –ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ —è –ø—Ä–æ–≤–µ–ª –ª–µ—Ç–æ\n\n\
üî• –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å CHATGPT –≤ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ üëáüèª'
    add_user(str(message.chat.id))
    await bot.send_message(chat_id=message.chat.id, text=a)


@dp.message_handler(lambda message: message.text == '–ü–û–î–ü–ò–°–ê–õ–°–Ø ‚úÖ')
async def got_sub(message: types.Message):
    status = False
    a = []
    for i in get_channels():
        if check_sub_channel(await bot.get_chat_member(chat_id=f'@{i}', user_id=message.from_user.id)):
            change_status(str(message.chat.id))
            a.append(True)
        else:
            a.append(False)
            await bot.send_message(chat_id=message.chat.id, text='–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã')
            break
    status = True
    for i in a:
        if i is False:
            status = False
    if status is True:
        await bot.send_message(chat_id=message.chat.id,
                               text='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ChatGPT –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ')


@dp.message_handler()
async def start_chat(message: types.Message):
    if add_user(str(message.chat.id)) is False and int(get_count(str(message.chat.id))) < 3:
        count_user(str(message.chat.id))

        if str(get_count(str(message.chat.id))) == '3':
            a = chat_ai(message.text)
            await bot.send_message(chat_id=message.chat.id, text=a)
            mes = ''
            channels = get_channels()
            for i in channels:
                mes += f'\n@{i}'
            MSG_NOT_FOLLOW = f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ChatGPT –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:' + mes
            await bot.send_message(chat_id=message.chat.id, text=MSG_NOT_FOLLOW, reply_markup=nav.bot_sub_checker)

        else:
            a = chat_ai(message.text)
            await bot.send_message(chat_id=message.chat.id, text=a)

    elif get_status(str(message.chat.id)) is True and int(get_count(str(message.chat.id))) >= 3:
        a = chat_ai(message.text)
        await bot.send_message(chat_id=message.chat.id, text=a, reply_markup=types.ReplyKeyboardRemove())


def check_sub_channel(chat_member):
    if chat_member['status'] != 'left':
        return True
    else:
        return False


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
